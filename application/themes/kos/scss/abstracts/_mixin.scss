@mixin font-face($fonts, $path: null) {
    @if ($path) {
        $path: $path;
    }

    @else {
        $path: '../../fonts/';
    }

    @each $key,
    $font in $fonts {
        @font-face {
            font-family: '#{ $font }';
            src: url($path + $font + '.eot');
            src: url($path + $font + '.eot') format('embedded-opentype'),
                url($path + $font + '.woff') format('woff'),
                url($path + $font + '.woff2') format('woff2'),
                url($path + $font + '.ttf') format('truetype'),
                url($path + $font + '.svg#' + $font) format('svg');
            font-weight: normal;
            font-style: normal;
        }
    }
}


@mixin extend-fonts($fonts-en, $fonts-th, $lang: 'th') {
    @if ($fonts-en) {

        @each $key,
        $font in $fonts-en {
            %#{$key} {
                font-family: map-get($fonts-en, $key), ' Arial, sans-serif';
                font-weight: normal;
                font-style: normal;

                @if ($fonts-th) {
                    :lang(#{$lang}) & {
                        @if ($fonts-th) {
                            font-family: map-get($fonts-th, $key), ' Arial, sans-serif';
                        }

                        @else {
                            font-family: 'Arial, sans-serif';
                        }

                        font-weight: normal;
                        font-style: normal;
                    }
                }
            }
        }
    }
}

@mixin font-family($name: 'Helvetica, Arial, sans-serif') {
    font-family: $name, 'Helvetica, Arial, sans-serif';
    font-weight: normal;
    font-style: normal;
}

@mixin flex($display: null, $justify: null, $align: null, $wrap: null, $direction: null) {
    @if ($display ==flex) {
        display: $display;
        display: -webkit- + $display;
    }

    @else {
        display: $display;
        justify-content: inherit;
        -webkit-justify-content: inherit;
        align-items: inherit;
        -webkit-align-items: inherit;
        flex-wrap: $wrap;
        -webkit-flex-wrap: inherit;
        flex-direction: inherit;
        -webkit-flex-direction: inherit;
    }

    @if ($justify) {
        justify-content: $justify;
        -webkit-justify-content: $justify;
    }

    @if ($align) {
        align-items: $align;
        -webkit-align-items: $align;
    }

    @if ($wrap) {
        flex-wrap: $wrap;
        -webkit-flex-wrap: $wrap;
    }

    @if ($direction) {
        flex-direction: $direction;
        -webkit-flex-direction: $direction;
    }
}

@mixin container-padding ($width: 1270px, $side: null) {
    @if $side ==left {
        padding-left: calc((100vw - #{$width})/2);
    }

    @if $side ==right {
        padding-right: calc((100vw - #{$width})/2);
    }
}

@mixin header {

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        @content;
    }
}

@mixin font-icomoon($content: null) {
    font-family: "icomoon" !important;
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    content: $content;
    display: inline-block;
}

@mixin font-awesome($content: null) {
    display: inline-block;
    font: normal normal normal 14px/1 FontAwesome;
    font-size: inherit;
    text-rendering: auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    content: $content;
}

@mixin filter($percent) {
    -webkit-filter: grayscale($percent);
    filter: grayscale($percent);
}

@mixin transform($property) {
    -webkit-transform: $property;
    -moz-transform: $property;
    -ms-transform: $property;
    -o-transform: $property;
    transform: $property;
}

@mixin transition($property...) {
    -webkit-transition: $property;
    -moz-transition: $property;
    -ms-transition: $property;
    -o-transition: $property;
    transition: $property;
}

@mixin transition-delay($property: 0s) {
    -webkit-transition-delay: $property;
    -moz-transition-delay: $property;
    -ms-transition-delay: $property;
    -o-transition-delay: $property;
    transition-delay: $property;
}

@mixin transform-origin($property: center) {
    -webkit-transform-origin: $property;
    -moz-transform-origin: $property;
    -ms-transform-origin: $property;
    -o-transform-origin: $property;
    transform-origin: $property;
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

@mixin animation($property) {
    -webkit-animation: $property;
    animation: $property;
}

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

@mixin class-transition-delay($amout: 1, $delay: .1, $name: 'transition-delay') {
    @for $i from 1 through $amout {
        .#{$name}-#{$i} {
            @include transition-delay(#{$delay*$i}s);
        }
    }
}

@mixin line-clamp ($line: 1) {
    display: -webkit-box;
    -webkit-line-clamp: $line;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

@mixin filter($style) {
    filter: $style;
    -webkit-filter: $style;
}